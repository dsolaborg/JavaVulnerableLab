pipeline {
    agent {
        docker {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    stages {
       stage('Build') {
            steps {
                sh 'mvn -B -DskipTests package'
            }
        }
        stage('Software Composition Analysis') {
            steps {
                dependencyCheckAnalyzer datadir: '/home/hirosh7/OWASP_NVD_Updates', hintsFile: '',
                includeCsvReports: false, includeHtmlReports: true, includeJsonReports: false,
                includeVulnReports: false, isAutoupdateDisabled: true, outdir: '.', scanpath: '.',
                skipOnScmChange: false, skipOnUpstreamChange: false, suppressionFile: '', zipExtensions: ''
            }
            post {
               always {
                    dependencyCheckPublisher canComputeNew: false, defaultEncoding: '', healthy: '',
                    pattern: '**/dependency-check-report.xml', unHealthy: ''
               }
           }
        }
        stage('SonarQube Analysis') {
            environment {
                SCANNER_URL = 'http://192.168.0.25:8888'
            }
            steps {
               withSonarQubeEnv('Jenkins SonarQube') {
                   sh 'mvn sonar:sonar -Dsonar.host.url=${SCANNER_URL}'
               }
            }
        }
        stage('SonarQube Q-Gate Check') {
           steps {
             timeout(time: 2, unit: 'MINUTES') {
                  waitForQualityGate abortPipeline: true
             }
           }
        }
        stage('Update to Slack') {
            steps {
                slackSend color: '#439FE0', message: 'Yabba Dabba Doo', token: 'SKoklc8CxgvUelO6vQOz7dDx'
            }
        }
        stage('OWASP ZAP Scan') {
                steps {
                    sh 'echo Scanning with OWASP ZAP'
                }
        }
    }
}
